#!/usr/bin/env ruby

ONE_LOCATION = ENV["ONE_LOCATION"]

if !ONE_LOCATION
    RUBY_LIB_LOCATION = "/usr/lib/one/ruby"
    VAR_LOCATION      = "/var/lib/one"
    ETC_LOCATION      = "/etc/one"
    LOCK_FILE         = "/var/lock/one/one"
else
    RUBY_LIB_LOCATION = ONE_LOCATION + "/lib/ruby"
    VAR_LOCATION      = ONE_LOCATION + "/var"
    ETC_LOCATION      = ONE_LOCATION + "/etc"
    LOCK_FILE         = VAR_LOCATION + "/.lock"
end

$: << RUBY_LIB_LOCATION
$: << RUBY_LIB_LOCATION + "/cli"
$: << RUBY_LIB_LOCATION + "/onedb"
$: << RUBY_LIB_LOCATION + "/onevc"

require 'command_parser'
require 'one_helper/onevc_helper'

cmd=CommandParser::CmdParser.new(ARGV) do
    usage "`onevc` <command> [<args>] [<options>]"
    version OpenNebulaHelper::ONE_VERSION

    helper = OneVCHelper.new

    ########################################################################
    # Global Options
    ########################################################################
    set :option, CommandParser::OPTIONS
    
    deploy_options = [
        OneVCHelper::NODE_TYPE_ID,
    ]
    
    delete_options = [
        OneVCHelper::NODE_TYPE_ID,
    ]

    ########################################################################
    # Formatters for arguments
    ########################################################################
    set :format, :vcid, OneVCHelper.to_id_desc do |arg|
        helper.to_id(arg)
    end

    set :format, :vcid_list, OneVCHelper.list_to_id_desc do |arg|
        helper.list_to_id(arg)
    end

    set :format, :vmtid, OneVCHelper.to_id_desc do |arg|
        helper.to_id(arg)
    end

    set :format, :vmtid_list, OneVCHelper.list_to_id_desc do |arg|
        helper.list_to_id(arg)
    end

    ########################################################################
    # Commands
    ########################################################################

    create_desc = <<-EOT.unindent
        Creates a new VC from the given template file.
    EOT
    command :create, create_desc, :file do
        helper.create_resource(options) do |vc|
            # template = args[0]
            error = vc.allocate(args[0])
        end
    end
    
    # TODO: Write deploy description
    deploy_desc = <<-EOT.unindent
        Deploy description
        
        States: PENDING
    EOT
    command :deploy, deploy_desc, :vcid, :options=>deploy_options do
        helper.perform_action(args[0], options, "deployed") do |vc|
            vc.deploy()
        end
    end
    
    delete_desc = <<-EOT.unindent
        Deletes the given VC

        States: ANY
    EOT
    command :delete, delete_desc, :vcid, :options=>delete_options do
        helper.perform_action(args[0], options, "deleted") do |vc|
            vc.delete()
        end
    end
    
    stop_desc = <<-EOT.unindent
        Stops a running VC. The VC state is saved and transferred back to the
        front-end along with the disk files

        States: RUNNING
    EOT

    command :stop, stop_desc, [:range,:vmic_list] do
        helper.perform_actions(args[0], options, "stopping") do |vc|
            vc.stop
        end
    end
    
    suspend_desc = <<-EOT.unindent
        Saves a running VC. It is the same as 'onevc stop', but the files
        are left in the remote machine to later restart the VC there
        (i.e. the resources are not freed and there is no need to
        re-schedule the VC).

        States: RUNNING
    EOT

    command :suspend, suspend_desc, [:range,:vcic_list] do
        helper.perform_actions(args[0], options, "suspending") do |vc|
            vc.suspend
        end
    end

    resume_desc = <<-EOT.unindent
        Resumes the execution of the a saved VM

        States: STOPPED, SUSPENDED
    EOT

    command :resume, resume_desc, [:range,:vcid_list] do
        helper.perform_actions(args[0], options, "resuming") do |vc|
            vc.resume
        end
    end    
        
    list_desc = <<-EOT.unindent
        Lists VCs in the pool
    EOT
    command :list, list_desc, [:filterflag, nil],
            :options=>CLIHelper::OPTIONS+OpenNebulaHelper::OPTIONS do
        helper.list_pool(options, false, args[0])
    end
    
    top_desc = <<-EOT.unindent
        Lists VCs in the pool continuously
    EOT
    command :top, top_desc, [:filterflag, nil],
            :options=>CLIHelper::OPTIONS+OpenNebulaHelper::OPTIONS do
        helper.list_pool(options, true, args[0])
    end
    
    # TODO: Write SUSPEND, STOP commands

end
